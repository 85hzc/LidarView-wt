# jobs starting with "." are ignored by gitlab-ci, they are used as anchor, which
# enable to reuse the same code inside multiple jobs. Please see YAML specification
# for more information
.unix_get_superbuild:
  script: &unix_get_superbuild
    - cd ..
    - chmod +x ${CI_PROJECT_DIR}/CI/findRightSuperbuildCache.sh
    - ${CI_PROJECT_DIR}/CI/findRightSuperbuildCache.sh ${OS} ${CI_COMMIT_REF_NAME} ${MINIO_CACHE_SERVER_ADDRESS} ${MINIO_CACHE_SERVER_ACCESS_KEY} ${MINIO_CACHE_SERVER_SECRET_KEY} ${mode}
    # create a symbolic link
    - cd ${CI_PROJECT_DIR}
    - ln -s ../Superbuild-build Superbuild-build

# Currently the OSX job are executed in a shell runner, every folder that is created remains
# the archived superbuild dir has its lidarview subproject builddir removed
# this removes previous superbuild build files
.superbuild_remove_old_dir:
  script: &superbuild_remove_old_dir
  - rm -rf ../Superbuild-build/

.unix_superbuild: &unix_superbuild
  stage: superbuild
  before_script: *superbuild_remove_old_dir
  script:
    - git submodule sync
    - git submodule update --init --recursive
    - git describe || git fetch --depth=10000 # needed for git describe to name our package
    # prepare directory
    - cd ..
    - mkdir -p Superbuild-build/
    - cd Superbuild-build/
    # configure & generate
    - >
      if [ "${mode}" == "full" ]; then
        optional_dependancies="ON"
      else
        optional_dependancies="OFF"
      fi
    - >
      if [ "${OS}" == "OSX_ElCapitan" ]; then
        osx_args="-DCMAKE_OSX_ARCHITECTURES:STRING=${cmake_option_CMAKE_OSX_ARCHITECTURES}
         -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=${cmake_option_CMAKE_OSX_DEPLOYMENT_TARGET}
         -DCMAKE_OSX_SYSROOT:STRING=${cmake_option_CMAKE_OSX_SYSROOT}
         -DCMAKE_OSX_SDK:STRING=${cmake_option_CMAKE_OSX_SDK}"
      else
        osx_args=""
      fi
    - cmake -DCMAKE_BUILD_TYPE:STRING=${cmake_option_CMAKE_BUILD_TYPE} ${osx_args}
      -DBUILD_TESTING=True
      -DENABLE_all=${optional_dependancies}
      -Dsuperbuild_download_location="../downloads"
      ${CI_PROJECT_DIR}/Superbuild
    # disable darknet on CI because no GPU available
    - cmake -DENABLE_all=False -DENABLE_darknet=False .
    # Tested on OSX_ElCapitan: opencv,nanoflann,ceres
    # PCL not working yet with weird error related to boost linking
    - >
      if [ "${OS}" == "OSX_ElCapitan" ]; then
        cmake -DENABLE_png=False -DENABLE_pcl=False .
      fi
    # force pcl to build only with 3 thread because we don't have enough RAM
    - >
      if [ "${OS}" != "OSX_ElCapitan" ]; then
        if [ "${mode}" == "full" ]; then
          cmake -DSUPERBUILD_PROJECT_PARALLELISM=3 .
          make pcl -j8
          cmake -DSUPERBUILD_PROJECT_PARALLELISM=$(nproc) .
        fi
      fi
    # Separately build boost & paraview to avoid their lengthy output to overflow runner's 4MB limit, if empty
    - >
      [ "${OS}" == "OSX_ElCapitan" ] && [ ! -e lidarview-superbuild/common-superbuild/paraview/build/CMakeCache.txt ] && make -j8 boost paraview > build.boost.paraview.log 2>&1
    # compile
    - make -j8
    # remove lidarview
    - rm -rf lidarview-superbuild/common-superbuild/lidarview
    # upload superbuild, Apple's Zip Utility, which I guess is use by gilab-ci
    # produce corrupted file for large file, so we need to upload the cache manually
    - cd ..
    - echo "compressing and uploading Superbuild. This take some time..."
    - tar zcf archive Superbuild-build/
    #create a symlink to mc from ~/mc if needed
    - stat ~/mc || (which mc && ln -s `which mc` ~/mc)
    - ~/mc config host add superbuild ${MINIO_CACHE_SERVER_ADDRESS} ${MINIO_CACHE_SERVER_ACCESS_KEY} ${MINIO_CACHE_SERVER_SECRET_KEY}
    - ~/mc cp archive superbuild/runner/minio/project/808/${cache_patch}/${OS}/${CI_COMMIT_REF_NAME}-${mode}

.unix_superbuild_manual: &unix_superbuild_manual
  when: manual
  <<: *unix_superbuild
  stage: manual

.unix_superbuild_schedule: &unix_superbuild_schedule
  <<: *unix_superbuild
  only:
    - schedules

.unix_build: &unix_build
  stage: build
  extends: .only-important
  before_script: *unix_get_superbuild
  script:
    - git submodule sync
    - git submodule update --init --recursive
    - cd ../Superbuild-build/ # created by extracting cache in "unix_get_superbuild"
    - make lidarview -j8

.unix_test: &unix_test
  stage: test
  extends: .only-important
  before_script: *unix_get_superbuild # you cannot put unix_build here
  script:
    # get test data and baseline
    - git submodule sync
    - git submodule update --init --recursive
    - git submodule update --init TestData
    - cd ../Superbuild-build/ # created by extracting cache in "unix_get_superbuild"
    - make lidarview -j8
    - cd ../Superbuild-build/lidarview-superbuild/common-superbuild/lidarview/build
    - cmake . -DBUILD_TESTING=True
    - make -j8
    # excluding packaging test targets (packaging is done later)
    # TODO current Source related tests fails, so we skip them.
    # This need to be fixed !
    - ctest -E "$test_blacklist"

.unix_package: &unix_package
  stage: package
  before_script: *unix_get_superbuild # you cannot put unix_build here
  script:
    - git submodule sync
    - git submodule update --init --recursive
    - git describe || git fetch --depth=10000 # needed for git describe to name our package
    - cd ../Superbuild-build/ # created by extracting cache in "unix_get_superbuild"
    - make lidarview -j8
    - ctest -R cpack

.unix_package_manual: &unix_package_manual
  when: manual
  <<: *unix_package
  stage: manual
  artifacts:
    name: ${CI_JOB_NAME}-${mode}
    paths:
     - Superbuild-build/*.tar.gz
     - Superbuild-build/*.dmg
    expire_in: 3 day

.unix_package_schedule: &unix_package_schedule
  <<: *unix_package
  artifacts:
    name: ${CI_JOB_NAME}-${mode}
    paths:
     - Superbuild-build/*.tar.gz # Superbuild-build links to ../Superbuild-build
     - Superbuild-build/*.dmg
    expire_in: 7 day
  only:
    - schedules

#-------------------------------------------------------------------------------
# jobs for Ubuntu 16.04
#-------------------------------------------------------------------------------
.ubuntu_16_04: &ubuntu_16_04
  tags:
    - ubuntu_16.04
  variables:
    OS: ubuntu_16.04

ubuntu16.04_build:
  <<: *ubuntu_16_04
  <<: *unix_build

ubuntu16.04_test:
  <<: *ubuntu_16_04
  <<: *unix_test

# For SuperBuild and package
# the "mode" variable should be used for choosing light/full
ubuntu16.04_superbuild_manual:
  <<: *ubuntu_16_04
  <<: *unix_superbuild_manual

ubuntu16.04_superbuild_schedule:
  <<: *ubuntu_16_04
  <<: *unix_superbuild_schedule

ubuntu16.04_package_manual:
  <<: *ubuntu_16_04
  <<: *unix_package_manual

ubuntu16.04_package_schedule:
  <<: *ubuntu_16_04
  <<: *unix_package_schedule


#-------------------------------------------------------------------------------
# jobs for OSX ElCapitan
#-------------------------------------------------------------------------------
.OSX_ElCapitan: &OSX_ElCapitan
  tags:
    - OSX_ElCapitan
  variables:
    OS: OSX_ElCapitan
# options specific to macOS builds
    cmake_option_CMAKE_OSX_ARCHITECTURES: "x86_64"
    cmake_option_CMAKE_OSX_DEPLOYMENT_TARGET: "10.10"
    cmake_option_CMAKE_OSX_SDK: "macosx10.12"
    cmake_option_CMAKE_OSX_SYSROOT: "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk"


OSX_ElCapitan_build:
  <<: *OSX_ElCapitan
  <<: *unix_build

OSX_ElCapitan_test:
  <<: *OSX_ElCapitan
  <<: *unix_test

# For SuperBuild and package
# the "mode" variable should be used for choosing light/full
OSX_ElCapitan_superbuild_manual:
  <<: *OSX_ElCapitan
  <<: *unix_superbuild_manual

OSX_ElCapitan_superbuild_manual_noclean:
  <<: *OSX_ElCapitan
  <<: *unix_superbuild_manual
  before_script:
    - echo "Not clearing the superbuild build dir"

OSX_ElCapitan_superbuild_schedule:
  <<: *OSX_ElCapitan
  <<: *unix_superbuild_schedule

OSX_ElCapitan_package_manual:
  <<: *OSX_ElCapitan
  <<: *unix_package_manual

OSX_ElCapitan_package_schedule:
  <<: *OSX_ElCapitan
  <<: *unix_package_schedule
